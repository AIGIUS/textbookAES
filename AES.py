import numpy as np
import random
import torch


# Sbox = (
#     0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
#     0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
#     0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
#     0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
#     0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
#     0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
#     0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
#     0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
#     0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
#     0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
#     0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
#     0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
#     0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
#     0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
#     0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
#     0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
# )
#
# InvSbox = (
#     0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
#     0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
#     0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
#     0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
#     0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
#     0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
#     0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
#     0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
#     0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
#     0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
#     0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
#     0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
#     0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
#     0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
#     0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
#     0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
# )
#
# Rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]


class AES:
    def __init__(self):
        self.plaintext = np.empty((16,), dtype=np.uint8)
        self.roundKey = np.empty((11, 16), dtype=np.uint8)
        self.sBox = np.array([
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16],
            dtype=np.uint8)
        self.inv_sBox = np.array([
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D],
            dtype=np.uint8)
        self.rc = np.array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36], dtype=np.uint8)
        self.xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

    def gen_random_plaintext(self):
        self.plaintext = np.random.randint(0, 256, (16,), dtype=np.uint8)

    def print_plaintext(self):
        print("plaintext is : ")
        np.set_printoptions(formatter={'all': lambda x: "%02x" % x})
        print(self.plaintext)
        np.set_printoptions()

    def gen_random_key(self, rnd=0):
        self.roundKey[rnd, :] = np.random.randint(0, 256, (16,), dtype=np.uint8)

    def print_key(self):
        print("key is : ")
        np.set_printoptions(formatter={'all': lambda x: "%02x" % x})
        print(self.roundKey)
        np.set_printoptions()

    def set_key(self, rnd=0, new_key=np.zeros((16,), dtype=np.uint8)):
        self.roundKey[rnd, :] = new_key

    def set_plaintext(self, new_plaintext=np.zeros((16,), dtype=np.uint8)):
        self.plaintext = new_plaintext

    def set_plaintext_by_byte(self, byte, value):
        self.plaintext[byte] = value

    def get_key(self, rnd=0):
        return self.roundKey[rnd, :]

    def get_plaintext(self):
        return self.plaintext

    def get_plaintext_by_byte(self, byte):
        return self.plaintext[byte]

    def add_round_key(self, rnd):
        self.plaintext ^= self.roundKey[rnd, :]

    def sub_bytes(self):
        self.plaintext = self.sBox[self.plaintext]

    def inv_sub_bytes(self):
        self.plaintext = self.inv_sBox[self.plaintext]

    def shift_rows(self):
        tmp = np.empty((16,), dtype=np.uint8)
        tmp[0] = self.plaintext[0]
        tmp[1] = self.plaintext[5]
        tmp[2] = self.plaintext[10]
        tmp[3] = self.plaintext[15]
        tmp[4] = self.plaintext[4]
        tmp[5] = self.plaintext[9]
        tmp[6] = self.plaintext[14]
        tmp[7] = self.plaintext[3]
        tmp[8] = self.plaintext[8]
        tmp[9] = self.plaintext[13]
        tmp[10] = self.plaintext[2]
        tmp[11] = self.plaintext[7]
        tmp[12] = self.plaintext[12]
        tmp[13] = self.plaintext[1]
        tmp[14] = self.plaintext[6]
        tmp[15] = self.plaintext[11]
        self.plaintext = tmp

    def inv_shift_rows(self):
        tmp = np.empty((16,), dtype=np.uint8)
        tmp[0] = self.plaintext[0]
        tmp[1] = self.plaintext[13]
        tmp[2] = self.plaintext[10]
        tmp[3] = self.plaintext[7]
        tmp[4] = self.plaintext[4]
        tmp[5] = self.plaintext[1]
        tmp[6] = self.plaintext[14]
        tmp[7] = self.plaintext[11]
        tmp[8] = self.plaintext[8]
        tmp[9] = self.plaintext[5]
        tmp[10] = self.plaintext[2]
        tmp[11] = self.plaintext[15]
        tmp[12] = self.plaintext[12]
        tmp[13] = self.plaintext[9]
        tmp[14] = self.plaintext[6]
        tmp[15] = self.plaintext[3]
        self.plaintext = tmp

    def mix_single_column(self, a):
        t = a[0] ^ a[1] ^ a[2] ^ a[3]
        u = a[0]
        a[0] ^= t ^ self.xtime(a[0] ^ a[1])
        a[1] ^= t ^ self.xtime(a[1] ^ a[2])
        a[2] ^= t ^ self.xtime(a[2] ^ a[3])
        a[3] ^= t ^ self.xtime(a[3] ^ u)

    def mix_columns(self):
        for i in range(4):
            self.mix_single_column(self.plaintext[4 * i:4 * (i + 1)])

    def inv_mix_columns(self):
        for i in range(4):
            u = self.xtime(self.xtime(self.plaintext[4 * i + 0] ^ self.plaintext[4 * i + 2]))
            v = self.xtime(self.xtime(self.plaintext[4 * i + 1] ^ self.plaintext[4 * i + 3]))
            self.plaintext[4 * i + 0] ^= u
            self.plaintext[4 * i + 1] ^= v
            self.plaintext[4 * i + 2] ^= u
            self.plaintext[4 * i + 3] ^= v
        self.mix_columns()

    def forward_expand_key(self, rnd):
        for j in [3, 2, 1, 0]:
            if j == 0:
                self.roundKey[rnd - 1, 4 * j] = self.roundKey[rnd, 4 * j] ^ self.sBox[
                    self.roundKey[rnd - 1, 4 * (j + 3) + 1]] ^ self.rc[rnd - 1]
                self.roundKey[rnd - 1, 4 * j + 1] = self.roundKey[rnd, 4 * j + 1] ^ self.sBox[
                    self.roundKey[rnd - 1, 4 * (j + 3) + 2]]
                self.roundKey[rnd - 1, 4 * j + 2] = self.roundKey[rnd, 4 * j + 2] ^ self.sBox[
                    self.roundKey[rnd - 1, 4 * (j + 3) + 3]]
                self.roundKey[rnd - 1, 4 * j + 3] = self.roundKey[rnd, 4 * j + 3] ^ self.sBox[
                    self.roundKey[rnd - 1, 4 * (j + 3)]]
            else:
                self.roundKey[rnd - 1, 4 * j] = self.roundKey[rnd, 4 * j] ^ self.roundKey[rnd, 4 * (j - 1)]
                self.roundKey[rnd - 1, 4 * j + 1] = self.roundKey[rnd, 4 * j + 1] ^ self.roundKey[rnd, 4 * (j - 1) + 1]
                self.roundKey[rnd - 1, 4 * j + 2] = self.roundKey[rnd, 4 * j + 2] ^ self.roundKey[rnd, 4 * (j - 1) + 2]
                self.roundKey[rnd - 1, 4 * j + 3] = self.roundKey[rnd, 4 * j + 3] ^ self.roundKey[rnd, 4 * (j - 1) + 3]

    def backward_expand_key(self, rnd):
        i = rnd + 1
        for j in [0, 1, 2, 3]:
            if j == 0:
                self.roundKey[i, 4 * j] = self.roundKey[i - 1, 4 * j] ^ self.sBox[
                    self.roundKey[i - 1, 4 * (j + 3) + 1]] ^ self.rc[i - 1]
                self.roundKey[i, 4 * j + 1] = self.roundKey[i - 1, 4 * j + 1] ^ self.sBox[
                    self.roundKey[i - 1, 4 * (j + 3) + 2]]
                self.roundKey[i, 4 * j + 2] = self.roundKey[i - 1, 4 * j + 2] ^ self.sBox[
                    self.roundKey[i - 1, 4 * (j + 3) + 3]]
                self.roundKey[i, 4 * j + 3] = self.roundKey[i - 1, 4 * j + 3] ^ self.sBox[
                    self.roundKey[i - 1, 4 * (j + 3)]]
            else:
                self.roundKey[i, 4 * j] = self.roundKey[i, 4 * (j - 1)] ^ self.roundKey[i - 1, 4 * j]
                self.roundKey[i, 4 * j + 1] = self.roundKey[i, 4 * (j - 1) + 1] ^ self.roundKey[i - 1, 4 * j + 1]
                self.roundKey[i, 4 * j + 2] = self.roundKey[i, 4 * (j - 1) + 2] ^ self.roundKey[i - 1, 4 * j + 2]
                self.roundKey[i, 4 * j + 3] = self.roundKey[i, 4 * (j - 1) + 3] ^ self.roundKey[i - 1, 4 * j + 3]

    def expand_key_from_r0(self):
        for rnd in range(10):
            self.backward_expand_key(rnd)

    def expand_key_from_r10(self):
        for rnd in range(10, 0, -1):
            self.forward_expand_key(rnd)


if __name__ == '__main__':
    aes = AES()
    for i in range(pow(2, 32)):
        if i % 1000 == 999:
            print("i is {}".format(i + 1, ))
        test_p = np.array(
            [0xb9, 0xd1, 0xc4, 0x8e, 0x34, 0x8f, 0xe7, 0x71, 0xfa, 0x46, 0x4a, 0x77, 0xa1, 0x78, 0xfb, 0x07])
        test_k = np.array(
            [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10])
        aes.set_plaintext(test_p.copy())
        # print(aes.get_plaintext())
        aes.set_key(0, test_k)
        aes.expand_key_from_r0()
        for rnd in range(11):
            if rnd == 0:
                pass
            elif rnd == 10:
                aes.sub_bytes()
                aes.shift_rows()
            else:
                aes.sub_bytes()
                aes.shift_rows()
                aes.mix_columns()
            aes.add_round_key(rnd)
        # aes.print_plaintext()
        for rnd in range(10, -1, -1):
            aes.add_round_key(rnd)
            if rnd == 0:
                pass
            elif rnd == 10:
                aes.inv_shift_rows()
                aes.inv_sub_bytes()
            else:
                aes.inv_mix_columns()
                aes.inv_shift_rows()
                aes.inv_sub_bytes()
        # aes.print_plaintext()
